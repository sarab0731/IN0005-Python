def calculate_final_grade(coursework_marks, coursework_weights, extenuating_circumstance, drop_lowest_mark):    # Adjust coursework weights if extenuating circumstance is provided    if extenuating_circumstance is not None:        ec_index = extenuating_circumstance - 1        x = coursework_weights[ec_index] / (len(coursework_weights) - 1)        del coursework_marks[ec_index]  # Remove mark associated with extenuating circumstance        del coursework_weights[ec_index]  # Remove weight associated with extenuating circumstance        for i in range(len(coursework_weights)):            coursework_weights[i] += x  # Redistribute weights evenly among remaining coursework            # Drop lowest mark if specified    if drop_lowest_mark:        lm_index = coursework_marks.index(min(coursework_marks))        x = coursework_weights[lm_index] / (len(coursework_weights) - 1)        del coursework_marks[lm_index]  # Remove lowest mark        del coursework_weights[lm_index]  # Remove weight associated with lowest mark        for i in range(len(coursework_weights)):            coursework_weights[i] += x  # Redistribute weights evenly among remaining coursework    # Calculate final mark based on weighted sum of coursework marks    mark = sum((coursework_marks[i] * coursework_weights[i]) / 100 for i in range(len(coursework_marks))) * 100    final_mark = round(mark, 1)  # Round final mark to one decimal place    return final_markdef calculate_grade(final_mark):    # Determine grade based on final mark    if final_mark >= 90:        return "A*"    elif 80 <= final_mark < 90:        return "A"    elif 70 <= final_mark < 80:        return "B"    elif 60 <= final_mark < 70:        return "C"    elif 50 <= final_mark < 60:        return "D"    else:        return "F"# Get module name from user inputmodule_name = input("Enter the module name: ")# Get number of students and create a list of student namesnum_students = int(input("Enter the number of students: "))students = [f"Student {i+1}" for i in range(num_students)]# Get number of courseworks and create a list of coursework namesnum_courseworks = int(input("Enter the number of courseworks in module: "))courseworks = [f"Coursework {i+1}" for i in range(num_courseworks)]weightings = []# Get weightings for each courseworkfor coursework in courseworks:    while True:        x = float(input(f"Enter the weighting for {coursework}: "))        if 0 <= x <= 1:            weightings.append(x)            break        else:            print("Error. Please enter a value between 0 and 1")# Check if total weightings add up to 1if sum(weightings) != 1:    print("Error. The coursework weightings do not add up to 1")    # Iterate over each studentfor student in range(1, num_students + 1):    print(f"\nStudent {student}:")    coursework_marks = []    # Get marks for each coursework    for coursework in courseworks:        while True:            mark = float(input(f"Enter the mark out of 100 for {coursework}: "))            if 0 <= mark <= 100:                coursework_marks.append(mark)                break            else:                print("Error. Please enter a value between 0 and 100")    # Check for extenuating circumstances or dropping lowest mark    extenuating_circumstance = None    drop_lowest_mark = False    ec_choice = input("Does the student have extenuating circumstances for any coursework? (Y/N): ")    if ec_choice.lower() == 'y':        extenuating_circumstance = int(input("Enter the coursework number with extenuating circumstances: "))    else:        drop_choice = input("Would you like to drop the lowest mark? (Y/N): ")        if drop_choice.lower() == 'y':            drop_lowest_mark = True    # Calculate final grade and determine grade    final_mark = calculate_final_grade(coursework_marks.copy(), weightings.copy(), extenuating_circumstance, drop_lowest_mark)    grade = calculate_grade(final_mark)    print(f"Final Mark for {module_name}: {final_mark}")    print(f"Grade: {grade}")            